<%- include('partials/head') -%>
<section class="section">
  <div class="container">
    <form id="myform">
      <h1 class="title" id="title">Loading</h1>
      <div class="field">
        <label class="label">Detalles</label>
        <div class="control">
          <table class="table  is-fullwidth" style="table-layout: fixed" id="details-table">
            <thead>
              <tr>
                <th>Project</th>
                <th>Phase</th>
                <th>Building</th>
                <th>Qty/Hour</th>
                <th>Unit Price</th>
                <th>Amount</th>
                <th>Comment</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>

      <div class="field is-grouped">
        <div class="control">
          <select
            class="select"
            name="select_new_project"
            id="select_new_project"
          >
            <option value="" selected disabled>Select a Project</option>
            <!-- Aquí se llenarán las opciones de proyecto -->
          </select>
        </div>
        <div class="control">
          <button
            type="button"
            class="button is-primary"
            onclick="addRow()"
          >
            Agregar Fila
          </button>
        </div>
      </div>

      <div class="field is-grouped">
        <div class="control">
          <button type="button" class="button is-primary" onclick="sendFormData()">Enviar</button>
        </div>
      </div>
    </form>
  </div>
</section>

<script>
  let data;

  function fetchWithToken(url, options = {}) {
    const token = localStorage.getItem('token');
    
    // Añadir el token al encabezado Authorization si está disponible
    if (token) {
      options.headers = {
        ...options.headers,
        'Authorization': `${token}`
      };
    }
    
    return fetch(url, options)
      .then(response => {
        if (!response.ok) {
          if (response.status === 401) { 
            window.location.href = '/auth/login';
          }
          throw new Error('Request failed with status ' + response.status);
        }
        return response;
      })
      .catch(error => {
        console.error('Fetch Error:', error);
        throw error;
      });
  }

  function calculateAmount(input) {
    const tr = input.parentNode.parentNode;
    const qtyHour = tr.querySelector(".qty-hour").value;
    const unitPrice = tr.querySelector(".unit-price").value;
    const amount = qtyHour * unitPrice;
    tr.querySelector(".amount").value = amount.toFixed(2);
  }

  function addRow() {
    const table = document
      .getElementById("details-table")
      .getElementsByTagName("tbody")[0];
    const project = document.getElementById("select_new_project").value;
    if (project != "" && project != null) {
      const newRow = table.insertRow(-1);
      var options = "";
      var objs = data.payapps.filter(function (obj) {
        if(obj.project == project){
          obj.childs.forEach(function (element) {
            options += `<option value="${element.id}">${element.phase} [${obj.category}]</option>`;
          });
          newRow.innerHTML = `
          <td><input class="input" type="text" name="project[]" value ="${project}" readonly ></td>
          <td>
              <div class="select">
                  <select name="phase[]" class="select-phase" onchange="updatePhase(this)">
                      ${options}
                  </select>
              </div>
          </td>
          
          <td><input class="input building" type="text" name="building[]"></td>
          <td><input class="input qty-hour" type="number" min="0" name="qty_hour[]" onchange="calculateAmount(this)"></td>
          <td><input class="input unit-price" type="number" min="0" name="unit_price[]" onchange="calculateAmount(this)" value=${obj.childs[0].price} readonly></td>
          <td><input class="input amount" type="number" readonly></td>
          <td><textarea class="textarea" name="comment[]"></textarea></td>
          <input type="hidden" name="payapp[]" value='${obj.id}'>
          `;
        }
        return obj.project == project;
      });
    }
  }

  function updatePhase(select) {
    const tr = select.parentNode.parentNode.parentNode;
    const phase = select.value;
    const project = tr.querySelector('[name="project[]"]').value;
    selectedPhase = null;

    data.payapps.forEach(function (payapp) {
      if(payapp.project == project){
        payapp.childs.forEach(function (elm2) {
          if(elm2.id == phase){
            const unitPriceInput = tr.querySelector(".unit-price");
            unitPriceInput.value = elm2.price;
            calculateAmount(unitPriceInput);
          }
        });
      }
    });        
  }

  const myHeaders = new Headers();

  const requestOptions = {
    method: "GET",
    headers: myHeaders,
    redirect: "follow",
  };

  fetchWithToken("/payapp/", requestOptions)
    .then((res) => {
      if (res.status === 401) {
        window.location.href = "/auth/login";
      }
      return res.json();
    })
    .then((dt) => {
      data = dt;
      const select = document.getElementById("select_new_project");
      const title = document.getElementById("title");
      dt.projects.forEach((project) => {
        if (project != null) {
          const option = document.createElement("option");
          option.value = project;
          option.textContent = project.slice(3);
          select.appendChild(option);
        }
      });
      title.innerHTML = dt.payapps[0].subcontractor;
    })
    .catch((error) => console.error(error));


  function sendFormData() {
    const formData = new FormData(document.getElementById("myform"));
    const formDataObject = {};
  
    for (const [key, value] of formData.entries()) {
      if (!formDataObject[key]) {
        formDataObject[key] = [value];
      } else {
        formDataObject[key].push(value);
      }
    }
  
    const jsonData = JSON.stringify(formDataObject);
  
    fetchWithToken("/labor_hours/save", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: jsonData
    })
    .then(response => {
      console.log(response);
      if (!response.ok) {
        throw new Error('Hubo un problema al enviar el formulario.');
      }
      alert('SENDED 👍');
      window.location.reload();
      //return response.text();
    })/*
    .then(data => {
      //console.log(data);
    })*/
    .catch(error => {
      alert('Error');
      console.error('Error:', error);
    });
  }
  
</script>

<%- include('partials/footer') -%>
    

    
    
